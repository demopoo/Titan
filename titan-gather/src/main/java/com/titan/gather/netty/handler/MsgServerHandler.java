package com.titan.gather.netty.handler;import com.google.protobuf.Any;import com.titan.gather.model.CommonMessage;import com.titan.gather.model.LoginReq;import com.titan.gather.model.ParentMessage;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerAdapter;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelPromise;import io.netty.channel.SimpleChannelInboundHandler;/** * @author: yupu * @Date: Created in 下午2:58 2018/9/16 * @Des: * @Modifyed By: */public class MsgServerHandler extends ChannelHandlerAdapter {    private int count = 0;    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {//        ByteBuf byteBuf = (ByteBuf)msg;//        byte[] bytes = new byte[byteBuf.readableBytes()];//        byteBuf.readBytes(bytes);//        System.out.println(new String(bytes,"UTF-8")+",and count = "+ ++count);//        String body = (String)msg;//        System.out.println(body+",and count = "+ ++count);//        ParentMessage.parent_message parentMessage = (ParentMessage.parent_message)msg;//        System.out.println(parentMessage.toString());////        ParentMessage.parent_message.Builder message_builder = ParentMessage.parent_message.newBuilder();//        message_builder.setId(999);//        message_builder.setName("Trecy");////        ParentMessage.parent_message message = message_builder.build();//        ctx.writeAndFlush(message);//        CommonMessage.common_message message = (CommonMessage.common_message)msg;//        System.out.println(message.toString());////        CommonMessage.common_message.Builder message_builer = CommonMessage.common_message.newBuilder();//        message_builer.setMsgId(999);//        message_builer.setMsgTitle("westbody");//        ctx.writeAndFlush(message_builer.build());        ParentMessage.parent_message message = (ParentMessage.parent_message)msg;        System.out.println("cmdValue:"+message.getCmdValue());        System.out.println("messageLen:"+message.getMessageLen());        System.out.println("*****************华丽的分割线******************");        Any any = message.getData();        LoginReq.login_req loginReq = any.unpack(LoginReq.login_req.class);        System.out.println(loginReq.toString());    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        ctx.close();    }    /**     * 将消息发送队列中国年的消息发送到SocketChannel,netty的write方法并不是将消息发送到     * SocketChannel中，而是发送到缓冲区中。调用flush则将缓冲区消息发送到SocketChannel     * @param ctx     * @throws Exception     */    @Override    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {        ctx.flush();    }    @Override    public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {        super.close(ctx, promise);    }}