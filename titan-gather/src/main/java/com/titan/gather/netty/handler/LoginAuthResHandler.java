package com.titan.gather.netty.handler;import com.google.protobuf.Any;import com.google.protobuf.ByteString;import com.titan.gather.constant.MessageTypeConstants;import com.titan.gather.model.message.Header;import com.titan.gather.model.message.TitanMessage;import io.netty.channel.ChannelHandlerAdapter;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelPromise;import java.net.InetSocketAddress;import java.net.SocketAddress;import java.util.concurrent.atomic.AtomicInteger;/** * @author: yupu * @Date: Created in 上午11:23 2018/11/3 * @Des: * @Modifyed By: */public class LoginAuthResHandler extends ChannelHandlerAdapter {    @Override    public void channelInactive(ChannelHandlerContext ctx) throws Exception {        StringBuilder builder = new StringBuilder();        builder.append("hello ").append("world");        System.out.println(1);    }    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        TitanMessage.titan_message message = (TitanMessage.titan_message)msg;        Header.header header = (message.getHeader()).unpack(Header.header.class);        if (header != null && header.getType() == MessageTypeConstants.SHAKE_HANDS_REQ){            Any any = message.getBody();            if (!any.getValue().isEmpty()){                ctx.close();            }else {                InetSocketAddress socketAddress = (InetSocketAddress) ctx.channel().remoteAddress();                String remoteIp = socketAddress.getAddress().getHostAddress();                String key = socketAddress.toString(); //key 实际上就是IP:PORT组合                //通过remoteIp可以用来做IP白名单限制，key可以用来做重复登录限制                ctx.writeAndFlush(buildMessage());            }        }else {            ctx.fireChannelRead(msg);        }    }    @Override    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {        super.channelReadComplete(ctx);    }    @Override    public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {        System.out.println("连接关闭了");    }    public TitanMessage.titan_message buildMessage(){        TitanMessage.titan_message.Builder message = TitanMessage.titan_message.newBuilder();        Header.header.Builder header = Header.header.newBuilder();        header.setCrcCode(0xabef0101);        header.setType(MessageTypeConstants.SHAKE_HANDS_RES);        message.setHeader(Any.pack(header.build()));        return message.build();    }    private AtomicInteger atomicInteger = new AtomicInteger();    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        System.out.println("连接成功感了: "+atomicInteger.addAndGet(1));    }    @Override    public void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {        System.out.println(1);    }}